# =================================================================
# Docker Compose - Production Environment
# =================================================================
# This compose file is optimized for production deployment with:
# - Production-ready configurations
# - Resource limits and reservations
# - Proper health checks and restart policies
# - Security considerations
# =================================================================

version: '3.8'

services:
  # =================================================================
  # API Application
  # =================================================================
  api:
    image: your-registry/dotnet-api-template:${TAG:-latest}
    container_name: dotnet-api-template-prod
    ports:
      - "80:8080"
      - "443:8080"  # If using HTTPS termination
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${DATABASE_CONNECTION_STRING}
      - CorsSettings__AllowedOrigins__0=${FRONTEND_URL}
      - CorsSettings__AllowCredentials=true
      - ApiSettings__Title=DotNet Core API Template
      - ApiSettings__Version=v1
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # =================================================================
  # SQL Server Database
  # =================================================================
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver-prod
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_SA_PASSWORD}
      - MSSQL_PID=Standard
    volumes:
      - sqlserver-prod-data:/var/opt/mssql
      - ./scripts/db-backup:/backup:ro
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_SA_PASSWORD} -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  # =================================================================
  # Reverse Proxy (Optional - Nginx)
  # =================================================================
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - api
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - proxy

  # =================================================================
  # Monitoring - Prometheus (Optional)
  # =================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - monitoring

  # =================================================================
  # Monitoring - Grafana (Optional)
  # =================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    profiles:
      - monitoring

# =================================================================
# Networks
# =================================================================
networks:
  app-network:
    driver: bridge
    name: dotnet-api-prod-network
    # For production, consider using overlay network for swarm mode
    # driver: overlay
    # attachable: true

# =================================================================
# Volumes
# =================================================================
volumes:
  sqlserver-prod-data:
    driver: local
    name: dotnet-api-sqlserver-prod-data

  prometheus-data:
    driver: local
    name: dotnet-api-prometheus-data

  grafana-data:
    driver: local
    name: dotnet-api-grafana-data

# =================================================================
# Configuration Notes
# =================================================================
# To deploy this configuration:
# 1. Set environment variables:
#    export TAG=v1.0.0
#    export DATABASE_CONNECTION_STRING="Server=sqlserver;Database=DotNetCoreAPITemplateDb;User Id=sa;Password=YourStrong@Password;TrustServerCertificate=true"
#    export DB_SA_PASSWORD="YourStrong@Password"
#    export FRONTEND_URL="https://yourfrontend.com"
#    export GRAFANA_PASSWORD="your-grafana-password"
# 2. Run: docker-compose -f docker-compose.prod.yml up -d
# 3. For monitoring: docker-compose -f docker-compose.prod.yml --profile monitoring up -d
# 4. For reverse proxy: docker-compose -f docker-compose.prod.yml --profile proxy up -d